var _a;
import { Either, Left, Right } from './Either.js';
import { MaybeAsync } from './MaybeAsync.js';
const helpers = {
    liftEither(either) {
        if (either.isRight()) {
            return Promise.resolve(either.extract());
        }
        throw either.extract();
    },
    fromPromise(promise) {
        return promise.then(helpers.liftEither);
    },
    throwE(error) {
        throw error;
    }
};
class EitherAsyncImpl {
    constructor(runPromise) {
        this.runPromise = runPromise;
        this[_a] = 'EitherAsync';
        this['fantasy-land/chain'] = this.chain;
        this['fantasy-land/alt'] = this.alt;
        this.then = (onfulfilled, onrejected) => {
            return this.run().then(onfulfilled, onrejected);
        };
    }
    leftOrDefault(defaultValue) {
        return this.run().then((x) => x.leftOrDefault(defaultValue));
    }
    orDefault(defaultValue) {
        return this.run().then((x) => x.orDefault(defaultValue));
    }
    join() {
        return EitherAsync(async (helpers) => {
            const either = await this;
            if (either.isRight()) {
                const nestedEither = await either.extract();
                return helpers.liftEither(nestedEither);
            }
            return helpers.liftEither(either);
        });
    }
    ap(eitherF) {
        return EitherAsync(async (helpers) => {
            const otherValue = await eitherF;
            if (otherValue.isRight()) {
                const thisValue = await this.run();
                if (thisValue.isRight()) {
                    return otherValue.extract()(thisValue.extract());
                }
                else {
                    return helpers.liftEither(thisValue);
                }
            }
            return helpers.liftEither(otherValue);
        });
    }
    alt(other) {
        return EitherAsync(async (helpers) => {
            const thisValue = await this.run();
            if (thisValue.isRight()) {
                return thisValue.extract();
            }
            else {
                const otherValue = await other;
                return helpers.liftEither(otherValue);
            }
        });
    }
    extend(f) {
        return EitherAsync(async (helpers) => {
            const either = await this.run();
            if (either.isRight()) {
                const v = EitherAsync.liftEither(either);
                return helpers.liftEither(Right(f(v)));
            }
            return helpers.liftEither(either);
        });
    }
    async run() {
        try {
            return Right(await this.runPromise(helpers));
        }
        catch (e) {
            return Left(e);
        }
    }
    bimap(f, g) {
        return EitherAsync(async (helpers) => {
            const either = await this.run();
            try {
                return (await helpers.liftEither(either.bimap(f, g)));
            }
            catch (e) {
                throw await e;
            }
        });
    }
    map(f) {
        return EitherAsync((helpers) => this.runPromise(helpers).then(f));
    }
    mapLeft(f) {
        return EitherAsync(async (helpers) => {
            try {
                return await this.runPromise(helpers);
            }
            catch (e) {
                throw await f(e);
            }
        });
    }
    chain(f) {
        return EitherAsync(async (helpers) => {
            const value = await this.runPromise(helpers);
            return helpers.fromPromise(f(value));
        });
    }
    chainLeft(f) {
        return EitherAsync(async (helpers) => {
            try {
                return await this.runPromise(helpers);
            }
            catch (e) {
                return helpers.fromPromise(f(e));
            }
        });
    }
    toMaybeAsync() {
        return MaybeAsync(async ({ liftMaybe }) => {
            const either = await this.run();
            return liftMaybe(either.toMaybe());
        });
    }
    swap() {
        return EitherAsync(async (helpers) => {
            const either = await this.run();
            if (either.isRight())
                helpers.throwE(either.extract());
            return helpers.liftEither(Right(either.extract()));
        });
    }
    ifLeft(effect) {
        return EitherAsync(async (helpers) => {
            const either = await this.run();
            either.ifLeft(effect);
            return helpers.liftEither(either);
        });
    }
    ifRight(effect) {
        return EitherAsync(async (helpers) => {
            const either = await this.run();
            either.ifRight(effect);
            return helpers.liftEither(either);
        });
    }
    void() {
        return this.map((_) => { });
    }
    caseOf(patterns) {
        return this.run().then((x) => x.caseOf(patterns));
    }
    finally(effect) {
        return EitherAsync(({ fromPromise }) => fromPromise(this.run().finally(effect)));
    }
}
_a = Symbol.toStringTag;
export const EitherAsync = Object.assign((runPromise) => new EitherAsyncImpl(runPromise), {
    fromPromise: (f) => EitherAsync(({ fromPromise: fP }) => fP(f())),
    liftEither: (either) => EitherAsync(({ liftEither }) => liftEither(either)),
    lefts: (list) => Promise.all(list.map((x) => x.run())).then(Either.lefts),
    rights: (list) => Promise.all(list.map((x) => x.run())).then(Either.rights),
    sequence: (eas) => EitherAsync(async (helpers) => {
        let res = [];
        for await (const e of eas) {
            if (e.isLeft()) {
                return helpers.liftEither(e);
            }
            res.push(e.extract());
        }
        return helpers.liftEither(Right(res));
    }),
    all: (eas) => EitherAsync.fromPromise(async () => Promise.all(eas).then(Either.sequence))
});
EitherAsyncImpl.prototype.constructor = EitherAsync;
