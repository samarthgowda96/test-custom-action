"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EitherAsync = void 0;
const Either_js_1 = require("./Either.js");
const MaybeAsync_js_1 = require("./MaybeAsync.js");
const helpers = {
    liftEither(either) {
        if (either.isRight()) {
            return Promise.resolve(either.extract());
        }
        throw either.extract();
    },
    fromPromise(promise) {
        return promise.then(helpers.liftEither);
    },
    throwE(error) {
        throw error;
    }
};
class EitherAsyncImpl {
    constructor(runPromise) {
        this.runPromise = runPromise;
        this[_a] = 'EitherAsync';
        this['fantasy-land/chain'] = this.chain;
        this['fantasy-land/alt'] = this.alt;
        this.then = (onfulfilled, onrejected) => {
            return this.run().then(onfulfilled, onrejected);
        };
    }
    leftOrDefault(defaultValue) {
        return this.run().then((x) => x.leftOrDefault(defaultValue));
    }
    orDefault(defaultValue) {
        return this.run().then((x) => x.orDefault(defaultValue));
    }
    join() {
        return (0, exports.EitherAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const either = yield this;
            if (either.isRight()) {
                const nestedEither = yield either.extract();
                return helpers.liftEither(nestedEither);
            }
            return helpers.liftEither(either);
        }));
    }
    ap(eitherF) {
        return (0, exports.EitherAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const otherValue = yield eitherF;
            if (otherValue.isRight()) {
                const thisValue = yield this.run();
                if (thisValue.isRight()) {
                    return otherValue.extract()(thisValue.extract());
                }
                else {
                    return helpers.liftEither(thisValue);
                }
            }
            return helpers.liftEither(otherValue);
        }));
    }
    alt(other) {
        return (0, exports.EitherAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const thisValue = yield this.run();
            if (thisValue.isRight()) {
                return thisValue.extract();
            }
            else {
                const otherValue = yield other;
                return helpers.liftEither(otherValue);
            }
        }));
    }
    extend(f) {
        return (0, exports.EitherAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const either = yield this.run();
            if (either.isRight()) {
                const v = exports.EitherAsync.liftEither(either);
                return helpers.liftEither((0, Either_js_1.Right)(f(v)));
            }
            return helpers.liftEither(either);
        }));
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return (0, Either_js_1.Right)(yield this.runPromise(helpers));
            }
            catch (e) {
                return (0, Either_js_1.Left)(e);
            }
        });
    }
    bimap(f, g) {
        return (0, exports.EitherAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const either = yield this.run();
            try {
                return (yield helpers.liftEither(either.bimap(f, g)));
            }
            catch (e) {
                throw yield e;
            }
        }));
    }
    map(f) {
        return (0, exports.EitherAsync)((helpers) => this.runPromise(helpers).then(f));
    }
    mapLeft(f) {
        return (0, exports.EitherAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.runPromise(helpers);
            }
            catch (e) {
                throw yield f(e);
            }
        }));
    }
    chain(f) {
        return (0, exports.EitherAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const value = yield this.runPromise(helpers);
            return helpers.fromPromise(f(value));
        }));
    }
    chainLeft(f) {
        return (0, exports.EitherAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.runPromise(helpers);
            }
            catch (e) {
                return helpers.fromPromise(f(e));
            }
        }));
    }
    toMaybeAsync() {
        return (0, MaybeAsync_js_1.MaybeAsync)(({ liftMaybe }) => __awaiter(this, void 0, void 0, function* () {
            const either = yield this.run();
            return liftMaybe(either.toMaybe());
        }));
    }
    swap() {
        return (0, exports.EitherAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const either = yield this.run();
            if (either.isRight())
                helpers.throwE(either.extract());
            return helpers.liftEither((0, Either_js_1.Right)(either.extract()));
        }));
    }
    ifLeft(effect) {
        return (0, exports.EitherAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const either = yield this.run();
            either.ifLeft(effect);
            return helpers.liftEither(either);
        }));
    }
    ifRight(effect) {
        return (0, exports.EitherAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const either = yield this.run();
            either.ifRight(effect);
            return helpers.liftEither(either);
        }));
    }
    void() {
        return this.map((_) => { });
    }
    caseOf(patterns) {
        return this.run().then((x) => x.caseOf(patterns));
    }
    finally(effect) {
        return (0, exports.EitherAsync)(({ fromPromise }) => fromPromise(this.run().finally(effect)));
    }
}
_a = Symbol.toStringTag;
exports.EitherAsync = Object.assign((runPromise) => new EitherAsyncImpl(runPromise), {
    fromPromise: (f) => (0, exports.EitherAsync)(({ fromPromise: fP }) => fP(f())),
    liftEither: (either) => (0, exports.EitherAsync)(({ liftEither }) => liftEither(either)),
    lefts: (list) => Promise.all(list.map((x) => x.run())).then(Either_js_1.Either.lefts),
    rights: (list) => Promise.all(list.map((x) => x.run())).then(Either_js_1.Either.rights),
    sequence: (eas) => (0, exports.EitherAsync)((helpers) => __awaiter(void 0, void 0, void 0, function* () {
        var _b, e_1, _c, _d;
        let res = [];
        try {
            for (var _e = true, eas_1 = __asyncValues(eas), eas_1_1; eas_1_1 = yield eas_1.next(), _b = eas_1_1.done, !_b; _e = true) {
                _d = eas_1_1.value;
                _e = false;
                const e = _d;
                if (e.isLeft()) {
                    return helpers.liftEither(e);
                }
                res.push(e.extract());
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_e && !_b && (_c = eas_1.return)) yield _c.call(eas_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return helpers.liftEither((0, Either_js_1.Right)(res));
    })),
    all: (eas) => exports.EitherAsync.fromPromise(() => __awaiter(void 0, void 0, void 0, function* () { return Promise.all(eas).then(Either_js_1.Either.sequence); }))
});
EitherAsyncImpl.prototype.constructor = exports.EitherAsync;
