"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaybeAsync = void 0;
const Maybe_js_1 = require("./Maybe.js");
const EitherAsync_js_1 = require("./EitherAsync.js");
const helpers = {
    liftMaybe(maybe) {
        if (maybe.isJust()) {
            return Promise.resolve(maybe.extract());
        }
        throw Maybe_js_1.Nothing;
    },
    fromPromise(promise) {
        return promise.then(helpers.liftMaybe);
    }
};
class MaybeAsyncImpl {
    constructor(runPromise) {
        this.runPromise = runPromise;
        this[_a] = 'MaybeAsync';
        this['fantasy-land/chain'] = this.chain;
        this['fantasy-land/filter'] = this.filter;
        this['fantasy-land/alt'] = this.alt;
    }
    orDefault(defaultValue) {
        return this.run().then((x) => x.orDefault(defaultValue));
    }
    join() {
        return (0, exports.MaybeAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const maybe = yield this.run();
            if (maybe.isJust()) {
                const nestedMaybe = yield maybe.extract();
                return helpers.liftMaybe(nestedMaybe);
            }
            return helpers.liftMaybe(Maybe_js_1.Nothing);
        }));
    }
    ap(maybeF) {
        return (0, exports.MaybeAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const otherValue = yield maybeF;
            if (otherValue.isJust()) {
                const thisValue = yield this.run();
                if (thisValue.isJust()) {
                    return otherValue.extract()(thisValue.extract());
                }
                else {
                    return helpers.liftMaybe(Maybe_js_1.Nothing);
                }
            }
            return helpers.liftMaybe(Maybe_js_1.Nothing);
        }));
    }
    alt(other) {
        return (0, exports.MaybeAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const thisValue = yield this.run();
            if (thisValue.isJust()) {
                return thisValue.extract();
            }
            else {
                const otherValue = yield other;
                return helpers.liftMaybe(otherValue);
            }
        }));
    }
    extend(f) {
        return (0, exports.MaybeAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const maybe = yield this.run();
            if (maybe.isJust()) {
                const v = exports.MaybeAsync.liftMaybe(maybe);
                return helpers.liftMaybe((0, Maybe_js_1.Just)(f(v)));
            }
            return helpers.liftMaybe(Maybe_js_1.Nothing);
        }));
    }
    filter(pred) {
        return (0, exports.MaybeAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const value = yield this.run();
            return helpers.liftMaybe(value.filter(pred));
        }));
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return (0, Maybe_js_1.Just)(yield this.runPromise(helpers));
            }
            catch (_b) {
                return Maybe_js_1.Nothing;
            }
        });
    }
    map(f) {
        return (0, exports.MaybeAsync)((helpers) => this.runPromise(helpers).then(f));
    }
    chain(f) {
        return (0, exports.MaybeAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const value = yield this.runPromise(helpers);
            return helpers.fromPromise(f(value));
        }));
    }
    toEitherAsync(error) {
        return (0, EitherAsync_js_1.EitherAsync)(({ liftEither }) => __awaiter(this, void 0, void 0, function* () {
            const maybe = yield this.run();
            return liftEither(maybe.toEither(error));
        }));
    }
    ifJust(effect) {
        return (0, exports.MaybeAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const maybe = yield this.run();
            maybe.ifJust(effect);
            return helpers.liftMaybe(maybe);
        }));
    }
    ifNothing(effect) {
        return (0, exports.MaybeAsync)((helpers) => __awaiter(this, void 0, void 0, function* () {
            const maybe = yield this.run();
            maybe.ifNothing(effect);
            return helpers.liftMaybe(maybe);
        }));
    }
    void() {
        return this.map((_) => { });
    }
    caseOf(patterns) {
        return this.run().then((x) => x.caseOf(patterns));
    }
    finally(effect) {
        return (0, exports.MaybeAsync)(({ fromPromise }) => fromPromise(this.run().finally(effect)));
    }
    then(onfulfilled, onrejected) {
        return this.run().then(onfulfilled, onrejected);
    }
}
_a = Symbol.toStringTag;
exports.MaybeAsync = Object.assign((runPromise) => new MaybeAsyncImpl(runPromise), {
    catMaybes: (list) => Promise.all(list).then(Maybe_js_1.Maybe.catMaybes),
    fromPromise: (f) => (0, exports.MaybeAsync)(({ fromPromise: fP }) => fP(f())),
    liftMaybe: (maybe) => (0, exports.MaybeAsync)(({ liftMaybe }) => liftMaybe(maybe))
});
MaybeAsyncImpl.prototype.constructor = exports.MaybeAsync;
