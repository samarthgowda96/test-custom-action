import { environ } from "@ihr-radioedit/sdk-utils";
/**
 * The scheme to use for a URL.
 */
export var Scheme;
(function (Scheme) {
    Scheme["INSECURE"] = "INSECURE";
    Scheme["SECURE"] = "SECURE";
    Scheme["WEBSOCKET"] = "WEBSOCKET";
    Scheme["INSECURE_WEBSOCKET"] = "INSECURE_WEBSOCKET";
})(Scheme || (Scheme = {}));
/**
 * The default scheme to use for HTTP requests. The default is relative (in browser) or secure (in node).
 * This is an env-var so we can override e.g. for local dev.
 */
export const RE_NETWORK_HTTP_SCHEME = environ.get("RE_NETWORK_URL_SCHEME", Scheme.SECURE);
/**
 * Enum of common HTTP request methods.
 */
export var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "GET";
    HttpMethod["POST"] = "POST";
    HttpMethod["PUT"] = "PUT";
    HttpMethod["DELETE"] = "DELETE";
    HttpMethod["PATCH"] = "PATCH";
    HttpMethod["HEAD"] = "HEAD";
    HttpMethod["OPTIONS"] = "OPTIONS";
})(HttpMethod || (HttpMethod = {}));
/**
 * Enum of common HTTP response status codes (and a couple custom ones for client-side errors).
 */
export var HttpStatus;
(function (HttpStatus) {
    HttpStatus[HttpStatus["UNKNOWN_CLIENT_FAILURE"] = 0] = "UNKNOWN_CLIENT_FAILURE";
    HttpStatus[HttpStatus["ABORTED"] = 1] = "ABORTED";
    HttpStatus[HttpStatus["OK"] = 200] = "OK";
    HttpStatus[HttpStatus["CREATED"] = 201] = "CREATED";
    HttpStatus[HttpStatus["ACCEPTED"] = 202] = "ACCEPTED";
    HttpStatus[HttpStatus["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
    HttpStatus[HttpStatus["NO_CONTENT"] = 204] = "NO_CONTENT";
    HttpStatus[HttpStatus["RESET_CONTENT"] = 205] = "RESET_CONTENT";
    HttpStatus[HttpStatus["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
    HttpStatus[HttpStatus["MULTI_STATUS"] = 207] = "MULTI_STATUS";
    HttpStatus[HttpStatus["ALREADY_REPORTED"] = 208] = "ALREADY_REPORTED";
    HttpStatus[HttpStatus["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
    HttpStatus[HttpStatus["FOUND"] = 302] = "FOUND";
    HttpStatus[HttpStatus["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
    HttpStatus[HttpStatus["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
    HttpStatus[HttpStatus["PERMANENT_REDIRECT"] = 308] = "PERMANENT_REDIRECT";
    HttpStatus[HttpStatus["BAD_REQUEST"] = 400] = "BAD_REQUEST";
    HttpStatus[HttpStatus["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
    HttpStatus[HttpStatus["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
    HttpStatus[HttpStatus["FORBIDDEN"] = 403] = "FORBIDDEN";
    HttpStatus[HttpStatus["NOT_FOUND"] = 404] = "NOT_FOUND";
    HttpStatus[HttpStatus["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
    HttpStatus[HttpStatus["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
    HttpStatus[HttpStatus["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
    HttpStatus[HttpStatus["CONFLICT"] = 409] = "CONFLICT";
    HttpStatus[HttpStatus["GONE"] = 410] = "GONE";
    HttpStatus[HttpStatus["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
    HttpStatus[HttpStatus["PAYLOAD_TOO_LARGE"] = 413] = "PAYLOAD_TOO_LARGE";
    HttpStatus[HttpStatus["URI_TOO_LONG"] = 414] = "URI_TOO_LONG";
    HttpStatus[HttpStatus["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
    HttpStatus[HttpStatus["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
    HttpStatus[HttpStatus["IM_A_TEAPOT"] = 418] = "IM_A_TEAPOT";
    HttpStatus[HttpStatus["UNPROCESSABLE_ENTITY"] = 422] = "UNPROCESSABLE_ENTITY";
    HttpStatus[HttpStatus["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
    HttpStatus[HttpStatus["UNAVAILABLE_FOR_LEGAL_REASONS"] = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS";
    HttpStatus[HttpStatus["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
    HttpStatus[HttpStatus["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
    HttpStatus[HttpStatus["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
    HttpStatus[HttpStatus["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
    HttpStatus[HttpStatus["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
    HttpStatus[HttpStatus["WEB_SERVER_IS_DOWN"] = 521] = "WEB_SERVER_IS_DOWN";
    HttpStatus[HttpStatus["CONNECTION_TIMED_OUT"] = 522] = "CONNECTION_TIMED_OUT";
    HttpStatus[HttpStatus["A_TIMEOUT_OCCURRED"] = 524] = "A_TIMEOUT_OCCURRED";
})(HttpStatus || (HttpStatus = {}));
/**
 * List of supported retry strategies.
 */
export var RetryStrategies;
(function (RetryStrategies) {
    /**
     * Exponential backoff strategy (default). Wait <base>^<attempt-count> * <scale-factor> milliseconds
     * between retries.
     */
    RetryStrategies["EXPONENTIAL"] = "exponential";
    /**
     * Linear backoff strategy. Wait <attempt-count> * <scale-factor> milliseconds between retries.
     */
    RetryStrategies["LINEAR"] = "linear";
    /**
     * Custom retry strategy. Must provide `shouldRetry` and `delay` functions to control retry behavior.
     */
    RetryStrategies["CUSTOM"] = "custom";
})(RetryStrategies || (RetryStrategies = {}));
/**
 * Default connect timeout for network requests.
 */
export const RE_NETWORK_TIMEOUT_CONNECT = environ.getInt("RE_NETWORK_TIMEOUT_CONNECT", 0) || undefined;
/**
 * Default response timeout for network requests.
 */
export const RE_NETWORK_TIMEOUT_RESPONSE = environ.getInt("RE_NETWORK_TIMEOUT_RESPONSE", 0) || undefined;
/**
 * Default overall timeout for network requests.
 */
export const RE_NETWORK_TIMEOUT_OVERALL = environ.getInt("RE_NETWORK_TIMEOUT_OVERALL", 0) || undefined;
/**
 * Default value for the `withCredentials` option.
 */
export const RE_NETWORK_WITH_CREDENTIALS = environ.getBoolean("RE_NETWORK_WITH_CREDENTIALS", false);
/**
 * Default value for the `keepalive` option.
 */
export const RE_NETWORK_KEEPALIVE = environ.getBoolean("RE_NETWORK_KEEPALIVE", true);
/**
 * Default number of times to retry a request, when it fails in a retryable fashion.
 */
export const RE_NETWORK_RETRIES = environ.getInt("RE_NETWORK_RETRIES", 3);
/**
 * Default list of HTTP response codes that should trigger a retry. This list is a fallback for when request options
 * don't include a function to determine retryability.
 */
export const RE_NETWORK_RETRY_CODES = Object.freeze(environ.has("RE_NETWORK_RETRY_CODES")
    ? environ.getList("RE_NETWORK_RETRY_CODES").map(x => parseInt(x, 10))
    : [
        HttpStatus.REQUEST_TIMEOUT,
        HttpStatus.TOO_MANY_REQUESTS,
        HttpStatus.INTERNAL_SERVER_ERROR,
        HttpStatus.SERVICE_UNAVAILABLE,
        HttpStatus.GATEWAY_TIMEOUT,
        HttpStatus.WEB_SERVER_IS_DOWN,
        HttpStatus.CONNECTION_TIMED_OUT,
        HttpStatus.A_TIMEOUT_OCCURRED,
    ]);
//# sourceMappingURL=const.js.map