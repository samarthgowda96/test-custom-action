import { ErrorBase, registerErrorDeserializer } from "@ihr-radioedit/errors";
import { createEmptyResponse } from "../adapter.js";
import { HttpStatus } from "../const.js";
/**
 * Error type for net failures.
 */
export class NetworkError extends ErrorBase {
    /**
     * Create a new instance from a net response.
     * @param message Error message.
     * @param response Network response.
     */
    static fromResponse(response, message) {
        const err = new NetworkError(
        // HTTP/2 doesn't have statusText, so we'll use the code as a fallback.
        message || response.statusText || String(response.status));
        err.response = response;
        return err;
    }
    static fromErrorData(data) {
        const err = new NetworkError(data.message);
        const code = parseInt(data.code, 10);
        err.stack = data.stack;
        err.response = createEmptyResponse(isNaN(code) ? HttpStatus.UNKNOWN_CLIENT_FAILURE : code, data.detail?.statusText);
        err.response.headers = new Headers(data.detail?.headers ?? {});
        err.response.retryCount = data.detail?.retryCount ?? 0;
        return err;
    }
    response = createEmptyResponse();
    toErrorData() {
        return {
            name: this.name,
            message: this.message,
            stack: this.stack,
            code: this.response.status,
            detail: {
                statusText: this.response.statusText,
                headers: Object.fromEntries(this.response.headers.entries()),
                retryCount: this.response.retryCount,
            },
        };
    }
}
registerErrorDeserializer("NetworkError", NetworkError.fromErrorData);
//# sourceMappingURL=base.js.map