import { AdapterOptions, NetworkClient, NetworkClientConfig, NetworkClientConstructor } from "./interface.js";
export * from "./adapters/base.js";
export * from "./adapters/echo.js";
export * from "./errors/base.js";
export * from "./errors/invalid-options.js";
export * from "./errors/no-suitable-adapter.js";
export * from "./errors/request-aborted.js";
export * from "./errors/response-not-available.js";
export * from "./adapter.js";
export * from "./const.js";
export * from "./interface.js";
export * from "./options.js";
export * from "./retry.js";
export * from "./util.js";
/**
 * Get an instance of a network adapter, initialized with the given options.
 * @param clientOptions Client options.
 * @param preferredName Optional name of the preferred adapter type, e.g. "fetch".
 */
export declare function getClient<TAdapterOptions extends NonNullable<unknown> = AdapterOptions>(clientOptions?: NetworkClientConfig<TAdapterOptions>, preferredName?: string): NetworkClient<TAdapterOptions>;
/**
 * Get a network adapter by optional name. If no name is provided, or the preferred adapter is unavailable, the
 * default adapter is returned.
 * @param preferredName The name of the preferred adapter.
 */
export declare function getAdapter<TAdapterOptions extends NonNullable<unknown> = AdapterOptions>(preferredName?: string): NetworkClientConstructor<TAdapterOptions>;
/**
 * Register a network adapter, and optionally make it the default.
 * @param name The name of the adapter.
 * @param adapter The adapter constructor.
 * @param makeDefault Whether to make this the default adapter.
 */
export declare function registerAdapter(name: string, adapter: NetworkClientConstructor<any>, makeDefault?: boolean): void;
/**
 * Set the default network adapter.
 * @param name The name of the adapter.
 */
export declare function setDefaultAdapter(name: string): void;
//# sourceMappingURL=index.d.ts.map