import { environ, isNode } from "@ihr-radioedit/sdk-utils";
import { RE_NETWORK_KEEPALIVE, RE_NETWORK_RETRIES, RE_NETWORK_TIMEOUT_CONNECT, RE_NETWORK_TIMEOUT_OVERALL, RE_NETWORK_TIMEOUT_RESPONSE, RE_NETWORK_WITH_CREDENTIALS, } from "./const.js";
export function optionsFromEnvironment() {
    return {
        retries: RE_NETWORK_RETRIES,
        withCredentials: RE_NETWORK_WITH_CREDENTIALS,
        keepalive: RE_NETWORK_KEEPALIVE,
        timeout: {
            connect: RE_NETWORK_TIMEOUT_CONNECT,
            response: RE_NETWORK_TIMEOUT_RESPONSE,
            overall: RE_NETWORK_TIMEOUT_OVERALL,
        },
    };
}
let _defaultOptions = optionsFromEnvironment();
/**
 * Get a copy of the default options used by all requests.
 */
export function defaultOptions() {
    return { ..._defaultOptions };
}
/**
 * Set the default options used by all requests.
 * @param options Options to use (which will be merged with existing defaults). Setting adapter-specific defaults is
 * not supported here, because the adapter used at request time could be different.
 */
export function setDefaultOptions(options) {
    _defaultOptions = { ...mergeOptions({ defaultOptions: optionsFromEnvironment() }, options) };
}
/**
 * Merge request options (with hook for adapter-specific options). This internal version is for merging without
 * side effects. The exported version incorporates global defaults. Follows the merging rules from
 * `NetworkClientConfig`.
 * @param defaultOptions Default options.
 * @param options Options to merge with the default options.
 * @param adapterMergeFn Optional function to merge adapter-specific options.
 * @param logger Optional logger from client config.
 * @see NetworkClientConfig
 */
function mergeOptionsInternal(defaultOptions, options, adapterMergeFn, logger) {
    const mergedOptions = {
        ...defaultOptions,
        ...options,
        timeout: { ...defaultOptions?.timeout, ...options?.timeout },
        headers: new Headers(defaultOptions?.headers),
        params: new URLSearchParams(defaultOptions?.params),
        adapterOptions: adapterMergeFn && defaultOptions?.adapterOptions && options?.adapterOptions
            ? adapterMergeFn(defaultOptions?.adapterOptions ?? {}, options.adapterOptions)
            : options?.adapterOptions ?? defaultOptions?.adapterOptions,
    };
    // Next, merge headers.
    if (options?.headers) {
        new Headers(options.headers).forEach((value, key) => {
            mergedOptions.headers.set(key, value);
        });
    }
    // Next, merge querystring params.
    if (options?.params) {
        new URLSearchParams(options.params).forEach((value, key) => {
            mergedOptions.params.append(key, value);
        });
    }
    // See if the request includes credentials.
    const hasAuth = mergedOptions.headers.has("Authorization") || mergedOptions.headers.has("Cookie");
    // In this case, the caller clearly wanted to send credentials and forgot to flip the flag on.
    if (hasAuth && !mergedOptions.withCredentials) {
        logger?.warn("Authorization or Cookie header exists, but withCredentials is not set. Setting to true.");
        mergedOptions.withCredentials = true;
    }
    // Include the app token in headers if credentials are enabled and the caller didn't include them.
    if (!hasAuth && mergedOptions.withCredentials && isNode && environ.appToken) {
        logger?.debug("Setting Authorization header from app token.");
        mergedOptions.headers.set("Authorization", `Bearer ${environ.appToken}`);
    }
    return mergedOptions;
}
/**
 * Merge request options (with hook for adapter-specific options) and apply config interceptors.
 * Follows the merging rules from `NetworkClientConfig`.
 * @param clientConfig Client configuration.
 * @param options Options to merge with the default options.
 * @param adapterMergeFn Optional function to merge adapter-specific options.
 * @see NetworkClientConfig
 */
export function mergeOptions(clientConfig, options, adapterMergeFn) {
    // First create a merged default options object that includes global defaults.
    const mergedDefaults = mergeOptionsInternal(defaultOptions(), clientConfig.defaultOptions, adapterMergeFn, clientConfig.logger);
    // Next, merge the defaults with the request options.
    const mergedOptions = mergeOptionsInternal(mergedDefaults, options, adapterMergeFn, clientConfig.logger);
    // Return the result of applying interceptors to the merged options.
    if (clientConfig.interceptors?.request) {
        clientConfig.logger?.debug("Applying interceptors to merged options.");
    }
    return (clientConfig.interceptors?.request?.reduce((mergedOptions, interceptor) => interceptor?.onConfigure?.(mergedOptions) ?? mergedOptions, mergedOptions) ?? mergedOptions);
}
//# sourceMappingURL=options.js.map