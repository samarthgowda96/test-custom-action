import { AdapterOptions, NetworkClient, NetworkClientConfig, NetworkFailure, NetworkResponse, RequestBody, RequestOptions } from "../interface.js";
import { HttpMethod } from "../const.js";
import { EitherAsync } from "purify-ts";
/**
 * Base implementation of `NetworkClientInterface`, with some convenience methods added.
 * @see NetworkClient
 */
export declare abstract class NetworkAdapter<TAdapterOptions extends NonNullable<unknown> = AdapterOptions, TAapterResponse = any> implements NetworkClient<TAdapterOptions, TAapterResponse> {
    protected _config: NetworkClientConfig<TAdapterOptions>;
    /**
     * Create a new instance with the given configuration.
     * @param _config
     */
    constructor(_config?: NetworkClientConfig<TAdapterOptions>);
    protected logRequest(method: HttpMethod | string, mergedUrl: URL, mergedOptions: RequestOptions): void;
    protected logResponse<U>(mergedUrl: URL, response: NetworkResponse<U, TAapterResponse>): void;
    /**
     * Get the current configuration for this client.
     */
    getConfig(): NetworkClientConfig<TAdapterOptions>;
    /**
     * Update the configuration for this client.
     * @param value
     */
    configure(value: NetworkClientConfig<TAdapterOptions>): this;
    /**
     * Make an HTTP DELETE request.
     * @param path
     * @param options
     */
    delete<T>(path: string | URL, options?: RequestOptions<TAdapterOptions>): EitherAsync<NetworkFailure<unknown, TAapterResponse>, NetworkResponse<T, TAapterResponse>>;
    /**
     * Make an HTTP GET request.
     * @param path
     * @param options
     */
    get<T>(path: string | URL, options?: RequestOptions<TAdapterOptions>): EitherAsync<NetworkFailure<unknown, TAapterResponse>, NetworkResponse<T, TAapterResponse>>;
    /**
     * Make an HTTP HEAD request.
     * @param path
     * @param options
     */
    head(path: string | URL, options?: RequestOptions<TAdapterOptions>): EitherAsync<NetworkFailure<unknown, TAapterResponse>, NetworkResponse<null, TAapterResponse>>;
    /**
     * Make an HTTP POST request.
     * @param path
     * @param body
     * @param options
     */
    post<T, U>(path: string | URL, body?: RequestBody<T>, options?: RequestOptions<TAdapterOptions>): EitherAsync<NetworkFailure<unknown, TAapterResponse>, NetworkResponse<U, TAapterResponse>>;
    /**
     * Make an HTTP PUT request.
     * @param path Path or URL to send the request to.
     * @param body
     * @param options
     */
    put<T, U>(path: string | URL, body: RequestBody<T>, options?: RequestOptions<TAdapterOptions>): EitherAsync<NetworkFailure<unknown, TAapterResponse>, NetworkResponse<U, TAapterResponse>>;
    /**
     * Adapter name (should be the same name used to register the adapter).
     */
    abstract readonly adapterName: string;
    /**
     * Make a network request. The promise should never reject, because the return value is an Either.
     * @param method HTTP method to use.
     * @param url URL to send the request to, or path relative to the `baseUrl` in configuration/options.
     * @param body Request body.
     * @param options Request options.
     */
    abstract request<T, U>(method: HttpMethod | string, url: string | URL, body?: RequestBody<T>, options?: RequestOptions<TAdapterOptions>): EitherAsync<NetworkFailure<unknown, TAapterResponse>, NetworkResponse<U, TAapterResponse>>;
}
//# sourceMappingURL=base.d.ts.map