import { HttpMethod } from "../const.js";
/**
 * Base implementation of `NetworkClientInterface`, with some convenience methods added.
 * @see NetworkClient
 */
export class NetworkAdapter {
    _config;
    /**
     * Create a new instance with the given configuration.
     * @param _config
     */
    constructor(_config) {
        this._config = _config ?? {};
    }
    logRequest(method, mergedUrl, mergedOptions) {
        const { logger } = this._config;
        if (logger) {
            logger.debug(`${this.adapterName} — ${method} ${mergedUrl.href}`, mergedOptions);
        }
    }
    logResponse(mergedUrl, response) {
        const { logger } = this._config;
        if (logger) {
            logger.debug(`${this.adapterName} — response ${mergedUrl.href}: ${response.status} ${response.statusText}`, {
                headers: Array.from(response.headers.entries()),
                retryCount: response.retryCount,
            });
        }
    }
    /**
     * Get the current configuration for this client.
     */
    getConfig() {
        return this._config;
    }
    /**
     * Update the configuration for this client.
     * @param value
     */
    configure(value) {
        this._config = value;
        return this;
    }
    /**
     * Make an HTTP DELETE request.
     * @param path
     * @param options
     */
    delete(path, options) {
        return this.request(HttpMethod.DELETE, path, undefined, options);
    }
    /**
     * Make an HTTP GET request.
     * @param path
     * @param options
     */
    get(path, options) {
        return this.request(HttpMethod.GET, path, undefined, options);
    }
    /**
     * Make an HTTP HEAD request.
     * @param path
     * @param options
     */
    head(path, options) {
        return this.request(HttpMethod.HEAD, path, undefined, options);
    }
    /**
     * Make an HTTP POST request.
     * @param path
     * @param body
     * @param options
     */
    post(path, body, options) {
        return this.request(HttpMethod.POST, path, body, options);
    }
    /**
     * Make an HTTP PUT request.
     * @param path Path or URL to send the request to.
     * @param body
     * @param options
     */
    put(path, body, options) {
        return this.request(HttpMethod.PUT, path, body, options);
    }
}
//# sourceMappingURL=base.js.map