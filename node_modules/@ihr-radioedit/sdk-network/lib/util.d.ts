import { AdapterOptions, RequestOptions } from "./interface.js";
import { Scheme } from "./const.js";
/**
 * Check if a string is a valid scheme.
 * @param s
 */
export declare function isScheme(s: string): s is Scheme;
export declare function schemeUrlPrefix(scheme?: Scheme): string;
/**
 * Get the base URL for a RadioEdit service. This will throw if the service is not declared as a dependency in the
 * environment.
 * @param serviceId The service ID to get the URL for.
 * @param pathPrefix A path prefix to append to the URL.
 * @param scheme The scheme to use for the URL. Defaults to the env-var `NETWORK_HTTP_SCHEME` or schemeless (relative).
 */
export declare function getServiceUrl(serviceId: string, pathPrefix?: string, scheme?: Scheme): URL;
/**
 * Serialize a request body to JSON, and update request options to set the content-type. The output can either be
 * a ReadableStream (for transforms and/or progress simulation) or a string.
 *
 * NOTE: A ReadableStream request body triggers CORS handling on an otherwise simple request, for some reason.
 *
 * @param value Value to serialize.
 * @param options Request options.
 * @param serialize Function to serialize the value to a string or ReadableStream.
 * @returns A tuple of the serialized value and an updated copy of the request options.
 * @see RequestOptions
 */
export declare function bodyToJson<T, U extends NonNullable<unknown> = AdapterOptions>(value: T, options?: RequestOptions<U>, serialize?: (value: T) => string | ReadableStream<T> | undefined): [string | ReadableStream<T>, RequestOptions<U>];
//# sourceMappingURL=util.d.ts.map