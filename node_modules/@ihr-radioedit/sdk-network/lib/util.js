import { environ, joinPath } from "@ihr-radioedit/sdk-utils";
import jsonStringify from "safe-stable-stringify";
import { RE_NETWORK_HTTP_SCHEME, Scheme } from "./const.js";
/**
 * Check if a string is a valid scheme.
 * @param s
 */
export function isScheme(s) {
    return Object.values(Scheme)
        .map(s => s.toLowerCase())
        .includes(s.toLowerCase());
}
export function schemeUrlPrefix(scheme) {
    switch (scheme) {
        case Scheme.INSECURE:
            return "http://";
        case Scheme.SECURE:
            return "https://";
        case Scheme.INSECURE_WEBSOCKET:
            return "ws://";
        case Scheme.WEBSOCKET:
            return "wss://";
        default:
            return schemeUrlPrefix(isScheme(RE_NETWORK_HTTP_SCHEME) ? RE_NETWORK_HTTP_SCHEME : Scheme.SECURE);
    }
}
/**
 * Get the base URL for a RadioEdit service. This will throw if the service is not declared as a dependency in the
 * environment.
 * @param serviceId The service ID to get the URL for.
 * @param pathPrefix A path prefix to append to the URL.
 * @param scheme The scheme to use for the URL. Defaults to the env-var `NETWORK_HTTP_SCHEME` or schemeless (relative).
 */
export function getServiceUrl(serviceId, pathPrefix = "", scheme) {
    if (!environ.hasDep(serviceId)) {
        throw new Error(`Auto connection needs declared dependency on ${serviceId} or a baseURL`);
    }
    return new URL(joinPath(`${schemeUrlPrefix(scheme)}${environ.dep(serviceId)}`, pathPrefix));
}
/**
 * Serialize a request body to JSON, and update request options to set the content-type. The output can either be
 * a ReadableStream (for transforms and/or progress simulation) or a string.
 *
 * NOTE: A ReadableStream request body triggers CORS handling on an otherwise simple request, for some reason.
 *
 * @param value Value to serialize.
 * @param options Request options.
 * @param serialize Function to serialize the value to a string or ReadableStream.
 * @returns A tuple of the serialized value and an updated copy of the request options.
 * @see RequestOptions
 */
export function bodyToJson(value, options, serialize = jsonStringify) {
    const opts = { ...options, headers: options?.headers ?? new Headers() };
    opts.headers.set("content-type", "application/json");
    return [serialize(value) ?? "", opts];
}
//# sourceMappingURL=util.js.map