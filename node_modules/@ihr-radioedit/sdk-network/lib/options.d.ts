import { AdapterOptions, MergedOptions, NetworkClientConfig, RequestOptions } from "./interface.js";
export declare function optionsFromEnvironment(): {
    retries: number;
    withCredentials: boolean;
    keepalive: boolean;
    timeout: {
        connect: number | undefined;
        response: number | undefined;
        overall: number | undefined;
    };
};
/**
 * Get a copy of the default options used by all requests.
 */
export declare function defaultOptions(): RequestOptions<never>;
/**
 * Set the default options used by all requests.
 * @param options Options to use (which will be merged with existing defaults). Setting adapter-specific defaults is
 * not supported here, because the adapter used at request time could be different.
 */
export declare function setDefaultOptions(options?: RequestOptions<never>): void;
/**
 * Merge request options (with hook for adapter-specific options) and apply config interceptors.
 * Follows the merging rules from `NetworkClientConfig`.
 * @param clientConfig Client configuration.
 * @param options Options to merge with the default options.
 * @param adapterMergeFn Optional function to merge adapter-specific options.
 * @see NetworkClientConfig
 */
export declare function mergeOptions<TAdapterOptions extends NonNullable<unknown> = AdapterOptions>(clientConfig: NetworkClientConfig<TAdapterOptions>, options?: RequestOptions<TAdapterOptions>, adapterMergeFn?: (defaultAdapterOptions: TAdapterOptions, adapterOptions: TAdapterOptions) => TAdapterOptions): MergedOptions<TAdapterOptions>;
//# sourceMappingURL=options.d.ts.map