import { EitherAsync } from "purify-ts";
import { Logger } from "@ihr-radioedit/logger";
import { CustomRetryStrategy, ExponentialRetryStrategy, LinearRetryStrategy, NetworkFailure, NetworkResponse, RetryConfig } from "./interface.js";
export declare function exponentialBackoff(base: number, jitter?: boolean, scaleFactor?: number, shouldRetry?: (config: RetryConfig, attempt: number, err: NetworkFailure) => boolean): ExponentialRetryStrategy;
export declare function isExponentialRetryStrategy(x: any): x is ExponentialRetryStrategy;
export declare function linearBackoff(scaleFactor?: number, shouldRetry?: (config: RetryConfig, attempt: number, err: NetworkFailure) => boolean): LinearRetryStrategy;
export declare function isCustomRetryStrategy(x: any): x is CustomRetryStrategy;
export declare function customBackoff(delay: (config: RetryConfig, attempt: number) => number, scaleFactor?: number, shouldRetry?: (config: RetryConfig, attempt: number, err: NetworkFailure) => boolean): CustomRetryStrategy;
export declare function isRetryConfig(x?: number | RetryConfig): x is RetryConfig;
/**
 * Retry implementation for `NetworkClientInterface` requests.
 * @param fn Function to execute.
 * @param retries Number of retries to attempt with default settings, or a `RetryConfig`.
 * @param logger Optional logger instance to record retry activity.
 * @see NetworkClientInterface
 * @see RetryConfig
 */
export declare function withRetries<T, U>(fn: () => EitherAsync<NetworkFailure<unknown, U>, NetworkResponse<T, U>>, retries?: number | RetryConfig, logger?: Logger<any>): EitherAsync<NetworkFailure<unknown, U>, NetworkResponse<T, U>>;
//# sourceMappingURL=retry.d.ts.map