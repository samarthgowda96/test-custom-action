/**
 * The scheme to use for a URL.
 */
export declare enum Scheme {
    INSECURE = "INSECURE",
    SECURE = "SECURE",
    WEBSOCKET = "WEBSOCKET",
    INSECURE_WEBSOCKET = "INSECURE_WEBSOCKET"
}
/**
 * The default scheme to use for HTTP requests. The default is relative (in browser) or secure (in node).
 * This is an env-var so we can override e.g. for local dev.
 */
export declare const RE_NETWORK_HTTP_SCHEME: string;
/**
 * Enum of common HTTP request methods.
 */
export declare enum HttpMethod {
    GET = "GET",
    POST = "POST",
    PUT = "PUT",
    DELETE = "DELETE",
    PATCH = "PATCH",
    HEAD = "HEAD",
    OPTIONS = "OPTIONS"
}
/**
 * Enum of common HTTP response status codes (and a couple custom ones for client-side errors).
 */
export declare enum HttpStatus {
    UNKNOWN_CLIENT_FAILURE = 0,
    ABORTED = 1,
    OK = 200,
    CREATED = 201,
    ACCEPTED = 202,
    NON_AUTHORITATIVE_INFORMATION = 203,
    NO_CONTENT = 204,
    RESET_CONTENT = 205,
    PARTIAL_CONTENT = 206,
    MULTI_STATUS = 207,
    ALREADY_REPORTED = 208,
    MOVED_PERMANENTLY = 301,
    FOUND = 302,
    NOT_MODIFIED = 304,
    TEMPORARY_REDIRECT = 307,
    PERMANENT_REDIRECT = 308,
    BAD_REQUEST = 400,
    UNAUTHORIZED = 401,
    PAYMENT_REQUIRED = 402,
    FORBIDDEN = 403,
    NOT_FOUND = 404,
    METHOD_NOT_ALLOWED = 405,
    NOT_ACCEPTABLE = 406,
    REQUEST_TIMEOUT = 408,
    CONFLICT = 409,
    GONE = 410,
    LENGTH_REQUIRED = 411,
    PAYLOAD_TOO_LARGE = 413,
    URI_TOO_LONG = 414,
    UNSUPPORTED_MEDIA_TYPE = 415,
    EXPECTATION_FAILED = 417,
    IM_A_TEAPOT = 418,
    UNPROCESSABLE_ENTITY = 422,
    TOO_MANY_REQUESTS = 429,
    UNAVAILABLE_FOR_LEGAL_REASONS = 451,
    INTERNAL_SERVER_ERROR = 500,
    NOT_IMPLEMENTED = 501,
    BAD_GATEWAY = 502,
    SERVICE_UNAVAILABLE = 503,
    GATEWAY_TIMEOUT = 504,
    WEB_SERVER_IS_DOWN = 521,
    CONNECTION_TIMED_OUT = 522,
    A_TIMEOUT_OCCURRED = 524
}
/**
 * List of supported retry strategies.
 */
export declare enum RetryStrategies {
    /**
     * Exponential backoff strategy (default). Wait <base>^<attempt-count> * <scale-factor> milliseconds
     * between retries.
     */
    EXPONENTIAL = "exponential",
    /**
     * Linear backoff strategy. Wait <attempt-count> * <scale-factor> milliseconds between retries.
     */
    LINEAR = "linear",
    /**
     * Custom retry strategy. Must provide `shouldRetry` and `delay` functions to control retry behavior.
     */
    CUSTOM = "custom"
}
/**
 * Default connect timeout for network requests.
 */
export declare const RE_NETWORK_TIMEOUT_CONNECT: number | undefined;
/**
 * Default response timeout for network requests.
 */
export declare const RE_NETWORK_TIMEOUT_RESPONSE: number | undefined;
/**
 * Default overall timeout for network requests.
 */
export declare const RE_NETWORK_TIMEOUT_OVERALL: number | undefined;
/**
 * Default value for the `withCredentials` option.
 */
export declare const RE_NETWORK_WITH_CREDENTIALS: boolean;
/**
 * Default value for the `keepalive` option.
 */
export declare const RE_NETWORK_KEEPALIVE: boolean;
/**
 * Default number of times to retry a request, when it fails in a retryable fashion.
 */
export declare const RE_NETWORK_RETRIES: number;
/**
 * Default list of HTTP response codes that should trigger a retry. This list is a fallback for when request options
 * don't include a function to determine retryability.
 */
export declare const RE_NETWORK_RETRY_CODES: readonly number[];
//# sourceMappingURL=const.d.ts.map