import { getLogger } from "@ihr-radioedit/logger";
import { NoSuitableAdapter } from "./errors/no-suitable-adapter.js";
import { EchoNetworkAdapter } from "./adapters/echo.js";
export * from "./adapters/base.js";
export * from "./adapters/echo.js";
export * from "./errors/base.js";
export * from "./errors/invalid-options.js";
export * from "./errors/no-suitable-adapter.js";
export * from "./errors/request-aborted.js";
export * from "./errors/response-not-available.js";
export * from "./adapter.js";
export * from "./const.js";
export * from "./interface.js";
export * from "./options.js";
export * from "./retry.js";
export * from "./util.js";
const libLogger = getLogger({ name: "sdk-network" });
/**
 * Registered network adapters.
 */
const adapters = {
    echo: EchoNetworkAdapter,
};
/**
 * Get an instance of a network adapter, initialized with the given options.
 * @param clientOptions Client options.
 * @param preferredName Optional name of the preferred adapter type, e.g. "fetch".
 */
export function getClient(clientOptions, preferredName) {
    const Cls = getAdapter(preferredName);
    return new Cls(clientOptions);
}
/**
 * Get a network adapter by optional name. If no name is provided, or the preferred adapter is unavailable, the
 * default adapter is returned.
 * @param preferredName The name of the preferred adapter.
 */
export function getAdapter(preferredName) {
    const adapter = preferredName ? adapters[preferredName] : adapters.default;
    if (adapter) {
        return adapter;
    }
    if (preferredName && adapters.default) {
        libLogger.warn(`Preferred network adapter ${preferredName} is not registered, using default.`);
        return adapters.default;
    }
    const errPrefix = preferredName ? `Preferred network adapter ${preferredName} is not registered, and no` : "No";
    throw new NoSuitableAdapter(`${errPrefix} default network client adapter is registered.`);
}
/**
 * Register a network adapter, and optionally make it the default.
 * @param name The name of the adapter.
 * @param adapter The adapter constructor.
 * @param makeDefault Whether to make this the default adapter.
 */
export function registerAdapter(name, adapter, makeDefault = false) {
    adapters[name] = adapter;
    if (makeDefault || !adapters.default) {
        if (adapters.default) {
            libLogger.warn(`Overwriting default network adapter ${adapters.default.name} with ${name}.`);
        }
        adapters.default = adapter;
    }
}
/**
 * Set the default network adapter.
 * @param name The name of the adapter.
 */
export function setDefaultAdapter(name) {
    if (!adapters[name]) {
        throw new Error(`No network adapter registered with name ${name}.`);
    }
    adapters.default = adapters[name];
}
//# sourceMappingURL=index.js.map