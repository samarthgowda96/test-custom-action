/// <reference types="node" />
import { NetworkFailure, NetworkResponse, ResponseInterceptor } from "./interface.js";
import { Either } from "purify-ts";
import { HttpStatus } from "./const.js";
/**
 * Merge a request URL with the client base URL and set query string parameters.
 *
 * @param url request URL
 * @param baseUrl client base URL
 * @param params query string parameters
 */
export declare function mergeUrl(url: string | URL, baseUrl?: string | URL, params?: URLSearchParams): URL & {
    search: string;
};
/**
 * Wrap (or create) an abort signal with a timeout. This will immediately start the timer, so don't call until you're
 * ready to send the request.
 *
 * @param signal abort signal passed in by the user.
 * @param timeout timeout in milliseconds.
 */
export declare function wrapSignal(signal?: AbortSignal, timeout?: number): {
    signal?: AbortSignal;
    timer?: NodeJS.Timeout;
};
/**
 * Create a response object with no data and the given status.
 * @param status HTTP status code.
 * @param statusText HTTP status text.
 */
export declare function createEmptyResponse<T, U>(status?: HttpStatus | number, statusText?: string): NetworkResponse<T, U>;
/**
 * Check the status of a NetworkResponse and convert it to a NetworkError if it's not ok.
 * @param resp NetworkResponse to check.
 * @param interceptors response interceptors.
 */
export declare function checkStatus<T, U>(resp: NetworkResponse<T, U>, interceptors?: ResponseInterceptor[]): Either<NetworkFailure<unknown, U>, NetworkResponse<T, U>>;
/**
 * Process a NetworkResponse through the response interceptors.
 * @param resp NetworkResponse to process.
 * @param interceptors response interceptors.
 */
export declare function applySuccessInterceptors<T, U>(resp: NetworkResponse<T, U>, interceptors?: ResponseInterceptor[]): NetworkResponse<T, U>;
/**
 * Process a NetworkError through the response interceptors.
 * @param err NetworkError to process.
 * @param interceptors response interceptors.
 */
export declare function applyFailureInterceptors<T, U>(err: NetworkFailure<T, U>, interceptors?: ResponseInterceptor[]): NetworkFailure<T, U>;
/**
 * Convert a ReadableStream to a Blob.
 * @param stream ReadableStream to convert.
 */
export declare function streamToBlob(stream: ReadableStream): Promise<Blob>;
//# sourceMappingURL=adapter.d.ts.map