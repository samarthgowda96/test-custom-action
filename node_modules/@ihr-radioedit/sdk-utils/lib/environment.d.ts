/**
 * Check if the current runtime is node-js.
 */
export declare const isNode: boolean;
/**
 * Check if the current runtime is a browser.
 */
export declare const isBrowser: boolean;
/**
 * Augment the global window object with the SDK environment variables.
 */
declare global {
    interface Window {
        SDK: {
            environment: Record<string, string>;
        };
    }
}
/**
 * A simple environment class that can be used to access environment variables in both the browser and server.
 */
export declare class Environment {
    protected envObj: Record<string, string | undefined>;
    constructor(overrides?: Record<string, string>);
    /**
     * Get the current RadioEdit application ID.
     */
    get appId(): string;
    /**
     * Get the current RadioEdit application token. Always empty in browser environments.
     */
    get appToken(): string;
    /**
     * Get the current RadioEdit application environment, e.g.: "dev", "stage", "prod".
     */
    get appEnvironment(): string;
    get appVersion(): string;
    /**
     * Get the current RadioEdit build ID.
     */
    get buildId(): string;
    /**
     * Get the current RadioEdit job ID.
     */
    get jobId(): string;
    /**
     * Get the current Kubernetes pod ID.
     */
    get podId(): string;
    /**
     * Resets the environment to the current process environment, or the window.SDK.environment
     */
    reset(overrides?: Record<string, string>): this;
    /**
     * Clear all environment variables.
     */
    clear(): void;
    /**
     * Check that the environment contains the given variable.
     */
    has(key: string): boolean;
    /**
     * Key all keys.
     */
    keys(): string[];
    /**
     * Get the value for an environment variable. Throws an error when
     * both the variable doesn't exist in the environment and the fallback is undefined.
     */
    get(key: string, def?: string): string;
    /**
     * Returns the value of an environment variable as an integer. Throws an error when
     * both the variable doesn't exist in the environment and the fallback is undefined.
     */
    getInt(key: string, fallback?: number, base?: number): number;
    /**
     * Returns the value of an environment variable as a float. Throws an error when
     * both the variable doesn't exist in the environment and the fallback is undefined.
     */
    getFloat(key: string, fallback?: number): number;
    /**
     * Returns the value of an environment variable as a boolean. Throws an error when
     * both the variable doesn't exist in the environment and the fallback is undefined.
     */
    getBoolean(key: string, fallback?: boolean): boolean;
    /**
     * Returns the value of an environment variable as a list of strings. Throws an error when
     * both the variable doesn't exist in the environment and the fallback is undefined.
     */
    getList(key: string, fallback?: string[], separator?: string): string[];
    /**
     * Get the hostname of an app dependency defined in service.yml.
     */
    hasDep(key: string): boolean;
    /**
     * Get the hostname of an app dependency defined in service.yml.
     */
    dep(key: string): string;
    /**
     * Get the environment variable name of a service dependency.
     * @param name dependency name
     * @private
     */
    private makeDependencyKey;
}
/**
 * The default environment instance. Based on the process env when in node, or a
 * standard global variable in browser.
 */
export declare const environ: Environment;
//# sourceMappingURL=environment.d.ts.map