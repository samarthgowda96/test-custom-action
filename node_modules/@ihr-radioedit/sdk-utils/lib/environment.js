import { notNullish } from "./util.js";
/**
 * Check if the current runtime is node-js.
 */
export const isNode = typeof process !== "undefined" && process.release && process.release.name === "node";
/**
 * Check if the current runtime is a browser.
 */
export const isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
/**
 * A simple environment class that can be used to access environment variables in both the browser and server.
 */
export class Environment {
    envObj = {};
    constructor(overrides) {
        this.reset(overrides);
    }
    /**
     * Get the current RadioEdit application ID.
     */
    get appId() {
        return this.get("APP_ID", "");
    }
    /**
     * Get the current RadioEdit application token. Always empty in browser environments.
     */
    get appToken() {
        return isBrowser ? "" : this.get("APP_TOKEN", "");
    }
    /**
     * Get the current RadioEdit application environment, e.g.: "dev", "stage", "prod".
     */
    get appEnvironment() {
        return this.get("APP_ENV", "");
    }
    get appVersion() {
        return this.get("APP_VERSION", "UNKNOWN");
    }
    /**
     * Get the current RadioEdit build ID.
     */
    get buildId() {
        return this.get("APP_BUILD_ID", "");
    }
    /**
     * Get the current RadioEdit job ID.
     */
    get jobId() {
        return this.get("APP_JOB_ID", "");
    }
    /**
     * Get the current Kubernetes pod ID.
     */
    get podId() {
        return this.get("POD_ID", "");
    }
    /**
     * Resets the environment to the current process environment, or the window.SDK.environment
     */
    reset(overrides) {
        let environment;
        if (isNode) {
            environment = { ...process.env };
            environment.APP_VERSION = environment.APP_VERSION ?? environment.npm_package_version ?? "UNKNOWN";
        }
        else if (isBrowser && !!window?.SDK?.environment) {
            environment = { ...window.SDK.environment };
        }
        else {
            environment = {};
        }
        this.envObj = { ...environment, ...(overrides || {}) };
        return this;
    }
    /**
     * Clear all environment variables.
     */
    clear() {
        this.envObj = {};
    }
    /**
     * Check that the environment contains the given variable.
     */
    has(key) {
        // eslint-disable-next-line no-prototype-builtins
        return this.envObj.hasOwnProperty(key);
    }
    /**
     * Key all keys.
     */
    keys() {
        return Object.keys(this.envObj);
    }
    /**
     * Get the value for an environment variable. Throws an error when
     * both the variable doesn't exist in the environment and the fallback is undefined.
     */
    get(key, def) {
        if (this.has(key)) {
            return this.envObj[key];
        }
        if (def !== undefined) {
            return def;
        }
        throw new Error(`Environment variable ${key} not found.`);
    }
    /**
     * Returns the value of an environment variable as an integer. Throws an error when
     * both the variable doesn't exist in the environment and the fallback is undefined.
     */
    getInt(key, fallback, base = 10) {
        const value = this.get(key, fallback !== undefined ? String(fallback) : undefined);
        const parsed = parseInt(value, base);
        if (isNaN(parsed)) {
            throw new Error(`Environment variable ${key} is present, but its value "${value}" does not parse as an integer.`);
        }
        return parsed;
    }
    /**
     * Returns the value of an environment variable as a float. Throws an error when
     * both the variable doesn't exist in the environment and the fallback is undefined.
     */
    getFloat(key, fallback) {
        const value = this.get(key, fallback !== undefined ? String(fallback) : undefined);
        const parsed = parseFloat(value);
        if (isNaN(parsed)) {
            throw new Error(`Environment variable ${key} is present, but its value "${value}" does not parse as a float.`);
        }
        return parsed;
    }
    /**
     * Returns the value of an environment variable as a boolean. Throws an error when
     * both the variable doesn't exist in the environment and the fallback is undefined.
     */
    getBoolean(key, fallback) {
        const value = this.get(key, fallback !== undefined ? String(fallback) : undefined);
        return value === "true" || value === "1";
    }
    /**
     * Returns the value of an environment variable as a list of strings. Throws an error when
     * both the variable doesn't exist in the environment and the fallback is undefined.
     */
    getList(key, fallback, separator = ",") {
        const rand = Math.random().toString();
        const value = this.get(key, fallback ? rand : undefined);
        if (value === rand) {
            return fallback ?? [];
        }
        else {
            return value
                .split(separator)
                .map(t => t.trim())
                .filter(notNullish);
        }
    }
    /**
     * Get the hostname of an app dependency defined in service.yml.
     */
    hasDep(key) {
        return this.has(this.makeDependencyKey(key));
    }
    /**
     * Get the hostname of an app dependency defined in service.yml.
     */
    dep(key) {
        return this.get(this.makeDependencyKey(key));
    }
    /**
     * Get the environment variable name of a service dependency.
     * @param name dependency name
     * @private
     */
    makeDependencyKey(name) {
        return `DEP_${name.replace(/-/g, "_").toUpperCase()}_HOST`;
    }
}
/**
 * The default environment instance. Based on the process env when in node, or a
 * standard global variable in browser.
 */
export const environ = new Environment();
//# sourceMappingURL=environment.js.map