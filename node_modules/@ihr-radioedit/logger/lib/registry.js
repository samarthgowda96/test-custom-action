import { loggerStub, ProxyLogger } from "./builtin.js";
import { defaultOptions } from "./options.js";
/**
 * Registry of adapters.
 */
const REGISTRY = {};
/**
 * Registers an adapter with the given name. If `makeDefault` is `true` or no default adapter is currently set,
 * this adapter will be used when no adapter name is given to `getLogger`.
 * @param adapterName Name of the adapter.
 * @param adapter `LoggerAdapter` function which returns a `Logger`.
 * @param makeDefault Whether to use this adapter when no adapter name is given.
 * @see getLogger
 * @see LoggerAdapter
 * @see Logger
 */
export function registerAdapter(adapterName, adapter, makeDefault = false) {
    if (makeDefault || !REGISTRY.default) {
        REGISTRY.default = adapter;
        ProxyLogger.use(adapter);
    }
    REGISTRY[adapterName] = adapter;
}
/**
 * Sets or removes the default adapter to use when no adapter name is given to `getLogger`. Generally this value
 * is set to the first adapter registered, but it can be changed at any time.
 * @param name Name of the adapter to use.
 */
export function setDefaultAdapter(name) {
    if (name && REGISTRY[name]) {
        REGISTRY.default = REGISTRY[name];
        ProxyLogger.use(REGISTRY[name]);
    }
    else {
        delete REGISTRY.default;
        ProxyLogger.use(() => loggerStub);
    }
}
/**
 * Gets a logger with the given options and adapter name. If no adapter name is given, the default adapter is used.
 * @param options Options for the logger.
 * @param adapterName Name of the adapter to use.
 */
export function getLogger(options, adapterName) {
    const mergedOpts = { ...defaultOptions(), ...options };
    // If the caller asks for an adapter by name, and it's not registered, we fall back to the default.
    return !!adapterName && REGISTRY[adapterName]
        ? REGISTRY[adapterName](mergedOpts)
        : REGISTRY.default
            ? REGISTRY.default(mergedOpts)
            : new ProxyLogger(mergedOpts);
}
//# sourceMappingURL=registry.js.map