import { LogLevel } from "./interface.js";
import { environ } from "@ihr-radioedit/sdk-utils";
/**
 * Gets the log level from the `LOG_LEVEL` environment variable. If the variable is not set, `INFO` is returned.
 */
function levelFromEnvironment() {
    const debug = environ.getBoolean("DEBUG", false);
    const value = environ.get("LOGGER_LEVEL", environ.get("LOG_LEVEL", "INFO")).toUpperCase();
    const asNum = parseInt(value, 10);
    // Numeric log levels are taken as-is unless the debug flag is on and the level is less verbose.
    if (!isNaN(asNum) && (!debug || asNum <= LogLevel.DEBUG)) {
        return asNum;
    }
    if (debug && value !== "TRACE") {
        // Debug flag overrides log level as long as it's not something more verbose.
        return LogLevel.DEBUG;
    }
    switch (value) {
        case "TRACE":
            return LogLevel.TRACE;
        case "DEBUG":
            return LogLevel.DEBUG;
        case "WARN":
        case "WARNING":
            return LogLevel.WARN;
        case "ERROR":
            return LogLevel.ERROR;
        case "FATAL":
            return LogLevel.FATAL;
        case "INFO":
        default:
            return LogLevel.INFO;
    }
}
export function optionsFromEnvironment() {
    return {
        name: environ.appId,
        level: levelFromEnvironment(),
        pretty: environ.getBoolean("LOGGER_PRETTY_PRINT", false),
        exitOnFatal: environ.getBoolean("LOGGER_EXIT_ON_FATAL", false),
    };
}
let _defaultOptions = optionsFromEnvironment();
/**
 * Get a copy of the default options used by all loggers.
 */
export function defaultOptions() {
    return { ..._defaultOptions };
}
/**
 * Set the default options used by all loggers.
 * @param options Options to use (which will be merged with existing defaults).
 */
export function setDefaultOptions(options) {
    _defaultOptions = { ...optionsFromEnvironment(), ...options };
}
//# sourceMappingURL=options.js.map