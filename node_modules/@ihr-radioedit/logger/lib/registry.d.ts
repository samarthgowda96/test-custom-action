import { Logger, LoggerAdapter, LoggerAdapterOptions, LoggerOptions } from "./interface.js";
/**
 * Registers an adapter with the given name. If `makeDefault` is `true` or no default adapter is currently set,
 * this adapter will be used when no adapter name is given to `getLogger`.
 * @param adapterName Name of the adapter.
 * @param adapter `LoggerAdapter` function which returns a `Logger`.
 * @param makeDefault Whether to use this adapter when no adapter name is given.
 * @see getLogger
 * @see LoggerAdapter
 * @see Logger
 */
export declare function registerAdapter<T extends NonNullable<unknown> = LoggerAdapterOptions>(adapterName: string, adapter: LoggerAdapter<T>, makeDefault?: boolean): void;
/**
 * Sets or removes the default adapter to use when no adapter name is given to `getLogger`. Generally this value
 * is set to the first adapter registered, but it can be changed at any time.
 * @param name Name of the adapter to use.
 */
export declare function setDefaultAdapter(name?: string): void;
/**
 * Gets a logger with the given options and adapter name. If no adapter name is given, the default adapter is used.
 * @param options Options for the logger.
 * @param adapterName Name of the adapter to use.
 */
export declare function getLogger<T extends NonNullable<unknown> = LoggerAdapterOptions>(options?: LoggerOptions<T>, adapterName?: string): Logger;
//# sourceMappingURL=registry.d.ts.map