import { ErrorBase, ErrorData } from "../base.js";
/**
 * Rendered details of a CombinedError.
 */
export type CombinedErrorDetail<T extends NonNullable<unknown>> = {
    allErrors: ErrorData<T>[];
};
/**
 * Generic type for an error that's bundling other errors, e.g. a GraphQL response or a validation result.
 */
export declare class CombinedError<T extends NonNullable<unknown>> extends ErrorBase<CombinedErrorDetail<T>> {
    errors: ErrorBase<T>[];
    code: string | number;
    constructor(message?: string);
    static fromErrors<T extends NonNullable<unknown>>(errors: ErrorBase<T>[], overallCode?: string | number, overallMessage?: string): CombinedError<T>;
    static fromErrorData<T extends NonNullable<unknown>>(data: ErrorData<CombinedErrorDetail<T>>): CombinedError<T>;
    toErrorData(): ErrorData<CombinedErrorDetail<T>>;
}
//# sourceMappingURL=combined.d.ts.map