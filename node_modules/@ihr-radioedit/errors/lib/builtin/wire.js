import { ErrorBase } from "../base.js";
import { errorData } from "../convert.js";
import { registerErrorDeserializer } from "../registry.js";
/**
 * Hydrated form of error data, e.g. from a network response.
 */
export class WireError extends ErrorBase {
    data;
    static fromErrorData(data) {
        const err = new WireError(data.message);
        err.stack = data.stack;
        err.data = data;
        return err;
    }
    /**
     * Create a WireError from an unknown object, with as much detail as can reasonably be gleaned by checking types.
     * @param obj
     */
    static from(obj) {
        if (obj instanceof ErrorBase) {
            return WireError.fromErrorData(obj.toErrorData());
        }
        const { causedBy, ...data } = errorData(obj);
        const err = WireError.fromErrorData(data);
        err.cause = obj;
        return err;
    }
    toErrorData() {
        return this.data
            ? this.data
            : {
                name: this.name,
                message: this.message,
                stack: this.stack,
                code: "UNKNOWN_ERROR",
                detail: undefined,
            };
    }
}
registerErrorDeserializer("WireError", WireError.fromErrorData);
//# sourceMappingURL=wire.js.map