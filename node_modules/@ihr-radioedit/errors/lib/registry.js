import { WireError } from "./builtin/wire.js";
const REGISTRY = {};
/**
 * Returns an instance of a concrete `ErrorBase` subclass from the given error data. If no subclass is registered
 * for the error name, a `WireError` is returned.
 * @param data The error data to deserialize.
 */
export function deserializeError(data) {
    return REGISTRY[data.name] ? REGISTRY[data.name](data) : WireError.fromErrorData(data);
}
/**
 * Register a concrete error class to be used when deserializing an error with the given name.
 * @param name The name of the error class.
 * @param factory A factory function that returns an instance of the error class from `ErrorData`.
 */
export function registerErrorDeserializer(name, factory) {
    REGISTRY[name] = factory;
}
//# sourceMappingURL=registry.js.map