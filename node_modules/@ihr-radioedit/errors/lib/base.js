/**
 * Checks if the given value is an object that fits the ErrorData format.
 * @param x The value to check.
 */
export function isErrorData(x) {
    if (typeof x === "object" && x !== null) {
        const obj = x;
        return (typeof obj.name === "string" &&
            typeof obj.message === "string" &&
            (typeof obj.code === "string" || typeof obj.code === "number") &&
            (typeof obj.stack === "string" || obj.stack === undefined) &&
            ((typeof obj.detail === "object" && obj.detail !== null) || obj.detail === undefined) &&
            ((typeof obj.causedBy === "object" && isErrorData(obj.causedBy)) || obj.causedBy === undefined));
    }
    return false;
}
/**
 * Base class for errors that ensures standard formatting for JSON serialization.
 */
export class ErrorBase extends Error {
    /**
     * Get the name of the error class from its constructor.
     * Note: this is a getter because the subclass name isn't available when the base class constructor runs.
     */
    get name() {
        return this.constructor.name;
    }
    // Note: as of ES6/ES2015 (or above) targets, the prototype chains for subclasses of built-in types like Error are
    // managed properly, so we don't need to override the constructor as before.
    /**
     * Returns a JSON-serializable object with standard properties for the error.
     */
    toJSON() {
        return this.toErrorData();
    }
    /**
     * Returns a string representation of the error.
     */
    toString() {
        return this.stack ?? `${this.name}: ${this.message}`;
    }
}
//# sourceMappingURL=base.js.map