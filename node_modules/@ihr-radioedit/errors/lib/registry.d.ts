import { ErrorBase, ErrorData, ErrorFactory } from "./base.js";
import { WireError } from "./builtin/wire.js";
/**
 * Returns an instance of a concrete `ErrorBase` subclass from the given error data. If no subclass is registered
 * for the error name, a `WireError` is returned.
 * @param data The error data to deserialize.
 */
export declare function deserializeError<T extends ErrorBase<any>>(data: ErrorData<any>): T | WireError<any>;
/**
 * Register a concrete error class to be used when deserializing an error with the given name.
 * @param name The name of the error class.
 * @param factory A factory function that returns an instance of the error class from `ErrorData`.
 */
export declare function registerErrorDeserializer(name: string, factory: ErrorFactory): void;
//# sourceMappingURL=registry.d.ts.map