import { ErrorBase, isErrorData } from "./base.js";
/**
 * Check if an unknown error type has a usable code property.
 * @param err
 */
export function isErrorWithCode(err) {
    return err instanceof Error && "code" in err && (typeof err.code === "string" || typeof err.code === "number");
}
function augmentWithCause(data, cause) {
    if (!cause) {
        return data;
    }
    const causeData = augmentWithCause(errorData(cause));
    return {
        ...data,
        causedBy: causeData,
    };
}
/**
 * Extract relevant data from an error, as best we can.
 * @param err The error to extract data from.
 */
export function errorData(err) {
    // These know how to render themselves.
    if (err instanceof ErrorBase) {
        return augmentWithCause(err.toErrorData(), err.cause);
    }
    // We'll get as much info as we can from other error types.
    if (err instanceof Error) {
        const { name, message, stack } = err;
        const code = isErrorWithCode(err) ? err.code : "UNKNOWN_ERROR";
        // Grabbig any enumerable properties we can from the unknown Error type.
        const detail = err.toJSON?.() ?? { ...err };
        return augmentWithCause({ name, message, stack, code, detail }, err.cause);
    }
    // Anything matching the ErrorData format just gets copied as such.
    if (isErrorData(err)) {
        const { name, message, stack, code, detail, causedBy } = err;
        return { name, message, stack, code, detail, causedBy };
    }
    // If we got here, we have no clue what type this "error" is, so we'll just return a generic error.
    return {
        message: "Unknown error",
        stack: undefined,
        name: "UnknownError",
        code: "UNKNOWN_ERROR",
        // Grabbing any enumerable properties we can from the unknown type.
        detail: typeof err === "object" && !!err ? err.toJSON?.() ?? { ...err } : undefined,
    };
}
//# sourceMappingURL=convert.js.map