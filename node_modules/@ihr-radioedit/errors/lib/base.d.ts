/**
 * Standard properties to return when an `ErrorBase` is serialized to JSON. Any non-null object value can be
 * supplied for the `detail` property.
 */
export interface ErrorData<T extends NonNullable<unknown>> {
    /**
     * The name of the error class. This is the same as the class's `name` property.
     */
    name: string;
    /**
     * The error message. May include a cause message.
     */
    message: string;
    /**
     * The stack trace. May include a cause stack.
     */
    stack?: string;
    /**
     * The error code. This can be numeric (like an HTTP code) or a more-descriptive string.
     */
    code: string | number;
    /**
     * Any additional details about the error. This can be any non-null object value.
     */
    detail?: T;
}
export interface ErrorDataWithCause<T extends NonNullable<unknown>, U extends NonNullable<unknown>, V extends NonNullable<unknown> = NonNullable<unknown>> extends ErrorData<T> {
    /**
     * Detail extracted from the error cause.
     */
    causedBy?: ErrorDataWithCause<U, V>;
}
/**
 * Checks if the given value is an object that fits the ErrorData format.
 * @param x The value to check.
 */
export declare function isErrorData<T extends NonNullable<unknown>, U extends NonNullable<unknown>>(x: unknown): x is ErrorDataWithCause<T, U>;
export type ErrorFactory<T extends ErrorBase<any> = ErrorBase<any>> = (data: ErrorData<any>) => T;
/**
 * Base class for errors that ensures standard formatting for JSON serialization.
 */
export declare abstract class ErrorBase<TDetail extends NonNullable<unknown>> extends Error {
    /**
     * Returns a JSON-serializable object with standard properties for the error.
     */
    abstract toErrorData(): ErrorData<TDetail>;
    /**
     * Get the name of the error class from its constructor.
     * Note: this is a getter because the subclass name isn't available when the base class constructor runs.
     */
    get name(): string;
    /**
     * Returns a JSON-serializable object with standard properties for the error.
     */
    toJSON(): ErrorData<TDetail>;
    /**
     * Returns a string representation of the error.
     */
    toString(): string;
}
//# sourceMappingURL=base.d.ts.map