/**
 * Used to verify if a resource is visible to any of the given observers
 * @param observers list of observers for an actor. Each is a dict of the form
 * @param membership list of members for a resource
 * @param capability per-app actions that determine available app features
 * @returns `true` if resource is visible to any of the given observers
 */
export function isVisible(observers, membership, capability) {
    return observers.some(o => membership.indexOf(o.mem) !== -1 && (!capability || o.cap === capability));
}
/**
 * Checks if the given member/capability pair are in the list of observers
 * @param observers list of observers for an actor. Each is a dict of the form
 * @param member a string that denotes interaction between observers and membership
 * @param capability per-app actions that determine available app features
 * @returns `true` if the given member/capability pair are in the list of observers
 */
export function hasObserver(observers, member, capability) {
    return isVisible(observers, member ? [member] : [], capability);
}
/**
 * Used to fetch the allowed actions for the given PolicyRule
 * @param rule a rule object
 * @param rule.op one of "is_visible" or "has_observer"
 * @param rule.cap "some app action"
 * @param rule.mem "some ostensibly observed member (for has_observer only)"
 * @param rule.actions list of allowed CRUD operations
 * @param observers list of observers for an actor. Each is a dict of the form
 * @param membership list of members for a resource
 * @returns An array of allowed actions for the given PolicyRule
 */
export function ruleAllowsActions(rule, observers, membership) {
    const ok = (rule.op === "is_visible" && isVisible(observers, membership, rule.cap)) ||
        (rule.op === "has_observer" && hasObserver(observers, rule.mem, rule.cap));
    return ok ? rule.actions : [];
}
/**
 * Used to get list of allowed actions
 * @param rules array of rule objects
 * @param observers list of observers for an actor. Each is a dict of the form
 * @param membership list of members for a resource
 * @returns An array of allowed actions for the given parameters
 */
export function allowedActions(rules, observers, membership) {
    const ruleActions = rules.map(r => ruleAllowsActions(r, observers, membership));
    return Array.from(new Set(ruleActions.flat()));
}
/**
 * Used to verify if an action is allowed under given policy rules for a given membership
 * @param rules array of rule objects
 * @param observers list of observers for an actor. Each is a dict of the form
 * @param membership list of members for a resource
 * @param action CRUD operation for objectapi ("read", "write", "etc.")
 * @returns `true` if an action is allowed by Policy
 */
export function policyAllows(rules, observers, membership, action) {
    const validActions = allowedActions(rules, observers, membership);
    return validActions.indexOf(action) !== -1 || validActions.indexOf("all") !== -1;
}
//# sourceMappingURL=security.js.map