import { NetworkClient, NetworkClientConfig, NetworkFailure } from "@ihr-radioedit/sdk-network";
import type { AuthObserver, MembershipQueryOptions, MemberWithCapability, PrincipalObj, QueryResultOptions, RoleCreateProperties, RoleSaveProperties, SearchOptions, SearchResponse, UserCreateProperties, UserSaveProperties } from "./types.js";
import { EitherAsync } from "purify-ts";
export declare const SERVICE_ID = "auth";
/**
 * Returns true if a PrincipalObj is BUILTIN user/role id
 * @param p principal object
 * @return true if user/role id is BUILTIN
 */
export declare function isBuiltin(p: Pick<PrincipalObj, "_id">): boolean;
/**
 * Checks if a PrincipalObj is Administrator
 * @param p principal object
 * @return true if user is Administrator
 */
export declare function isAdmin(p: Pick<PrincipalObj, "observer_of">): boolean;
/**
 * Checks if a PrincipalObj is System Administrator
 * @param p principal object
 * @return true if user is System Administrator
 */
export declare function isSystemAdmin(p: Pick<PrincipalObj, "observer_of">): boolean;
/**
 * Provides functions to work with PrincipalObj
 */
export declare class AuthClient {
    protected http: NetworkClient;
    constructor(http: NetworkClient);
    static auto(config?: NetworkClientConfig): AuthClient;
    /**
     * Used to fetch principal data for the currently logged in user
     * @return A promise that contains User Data when fulfilled
     */
    getMyPrincipal(): EitherAsync<NetworkFailure<unknown, any>, PrincipalObj>;
    /**
     * Used to fetch PrincipalObj Data for a given token
     * @param token Access token
     * @return A promise that contains User Data for the given token when fulfilled
     */
    getPrincipalForToken(token: string): EitherAsync<NetworkFailure<unknown, any>, PrincipalObj>;
    /**
     * Used to fetch Principal Data for a given principal id
     * @param id Principal id
     * @return A promise that contains User Data for the given id when fulfilled
     */
    getPrincipalById(id: string): EitherAsync<NetworkFailure<unknown, any>, PrincipalObj>;
    /**
     * Accessor for principal search functionality.
     */
    get search(): PrincipalsSearchAPI;
    /**
     * Used to create a new principal
     * @param properties principal data (varies by type)
     * @return A promise that contains User Data when fulfilled
     */
    createPrincipal(properties: UserCreateProperties | RoleCreateProperties): EitherAsync<NetworkFailure<unknown, any>, PrincipalObj>;
    /**
     * Accessor for principal management functionality.
     * @param p principal object
     */
    principal(p: Pick<PrincipalObj, "_id" | "type">): PrincipalAPI;
}
/**
 * Provides API for searching PrincipalObj
 */
export declare class PrincipalsSearchAPI {
    protected http: NetworkClient;
    private path;
    constructor(http: NetworkClient);
    /**
     * Creates an encoded query for the given search options
     * @param options search options
     * @private
     * @return encoded query
     */
    private createSpec;
    /**
     * Fetch  list of principals along with count for the given memberships
     * @param members list of member/capability pairs
     * @param options search options
     * @return A promise that resolves to an object containing array of User Data objects when fulfilled
     */
    byMemberships(members: MemberWithCapability[], options: QueryResultOptions & MembershipQueryOptions): EitherAsync<NetworkFailure<unknown, any>, SearchResponse<PrincipalObj>>;
    /**
     * Fetch a list of principals along with count for the given query
     * @param options search options
     * @return A promise that resolves to an object containing array of User Data objects when fulfilled
     */
    byQuery(options: SearchOptions & QueryResultOptions): EitherAsync<NetworkFailure<unknown, any>, SearchResponse<PrincipalObj>>;
    /**
     * Fetch a list of principals identified by the provided ids
     * @param ids list of principal ids
     * @return A promise that contains an object with an array or principals
     */
    byIds(ids: string[]): EitherAsync<NetworkFailure<unknown, any>, SearchResponse<PrincipalObj>>;
}
/**
 * Provides CRUD operations for PrincipalObj
 */
export declare class PrincipalAPI {
    protected http: NetworkClient;
    protected principal: Pick<PrincipalObj, "_id" | "type">;
    constructor(http: NetworkClient, principal: Pick<PrincipalObj, "_id" | "type">);
    private get path();
    /**
     * Save a role for a PrincipalObj
     * @param properties role data
     * @return A promise containing user data when fulfilled
     */
    saveRole(properties: RoleSaveProperties): EitherAsync<NetworkFailure<unknown, any>, PrincipalObj>;
    /**
     * Update a principal
     * @param properties principal data
     * @return A promise containing user data when fulfilled
     */
    saveUser(properties: UserSaveProperties): EitherAsync<NetworkFailure<unknown, any>, PrincipalObj>;
    /**
     * Delete roles for a principal
     * @return Empty Promise
     */
    remove(): EitherAsync<NetworkFailure<unknown, any>, void>;
    /**
     * Gets a list of roles for a User
     * @param options search options
     * @return A promise that resolves to an object containing array of user data (id, name) objects
     */
    getRoles(options: QueryResultOptions): EitherAsync<NetworkFailure<unknown, any>, SearchResponse<{
        _id: string;
        name: string;
    }>>;
    /**
     * Gets a list of users for a role
     * @param options search options
     * @return A promise
     */
    getUsers(options: QueryResultOptions): EitherAsync<NetworkFailure<unknown, any>, SearchResponse<PrincipalObj>>;
    /**
     * Add users to a role.
     * @param userIds list of user ids
     * @return Empty promise
     */
    addUsers(userIds: string[]): EitherAsync<NetworkFailure<unknown, any>, void>;
    /**
     * Remove roles from a user
     * @param userId user id
     * @return Empty promise
     */
    removeUser(userId: string): EitherAsync<NetworkFailure<unknown, any>, void>;
    /**
     * List delegates for a user
     * @param options search options
     * @return A promise that resolves to an object containing array of User Data objects when fulfilled
     */
    getDelegates(options: QueryResultOptions): EitherAsync<NetworkFailure<unknown, any>, SearchResponse<PrincipalObj>>;
    /**
     * Add the given users as delegates of a principal
     * @param userIds list of user ids
     * @return A promise that resolves to an object containing array of User Data objects when fulfilled
     */
    addDelegates(userIds: string[]): EitherAsync<NetworkFailure<unknown, any>, void>;
    /**
     * Remove a delegate from a user
     * @param userId user id
     * @return Empty promise
     */
    removeDelegate(userId: string): EitherAsync<NetworkFailure<unknown, any>, void>;
    /**
     * Add observers to a principal
     * @param observers
     * @return A promise containing AuthObserver array when fulfilled
     */
    addObservers(observers: MemberWithCapability[]): EitherAsync<NetworkFailure<unknown, any>, AuthObserver[]>;
    /**
     * Remove an observer from a principal
     * @param mem member
     * @param cap capability
     * @return A promise containing the observer list when fulfilled
     */
    removeObserver(mem: string, cap?: string): EitherAsync<NetworkFailure<unknown, any>, AuthObserver[]>;
}
//# sourceMappingURL=client.d.ts.map