import { MemberWithCapability } from "./types.js";
export type PolicyAction = "all" | "read" | "write" | "delete" | "grant";
export interface PolicyRule {
    op: "has_observer" | "is_visible";
    actions: PolicyAction[];
    mem?: string;
    cap?: string;
}
export type MemberObserverList = MemberWithCapability[];
/**
 * Used to verify if a resource is visible to any of the given observers
 * @param observers list of observers for an actor. Each is a dict of the form
 * @param membership list of members for a resource
 * @param capability per-app actions that determine available app features
 * @returns `true` if resource is visible to any of the given observers
 */
export declare function isVisible(observers: MemberObserverList, membership: string[], capability?: string): boolean;
/**
 * Checks if the given member/capability pair are in the list of observers
 * @param observers list of observers for an actor. Each is a dict of the form
 * @param member a string that denotes interaction between observers and membership
 * @param capability per-app actions that determine available app features
 * @returns `true` if the given member/capability pair are in the list of observers
 */
export declare function hasObserver(observers: MemberObserverList, member?: string, capability?: string): boolean;
/**
 * Used to fetch the allowed actions for the given PolicyRule
 * @param rule a rule object
 * @param rule.op one of "is_visible" or "has_observer"
 * @param rule.cap "some app action"
 * @param rule.mem "some ostensibly observed member (for has_observer only)"
 * @param rule.actions list of allowed CRUD operations
 * @param observers list of observers for an actor. Each is a dict of the form
 * @param membership list of members for a resource
 * @returns An array of allowed actions for the given PolicyRule
 */
export declare function ruleAllowsActions(rule: PolicyRule, observers: MemberObserverList, membership: string[]): string[];
/**
 * Used to get list of allowed actions
 * @param rules array of rule objects
 * @param observers list of observers for an actor. Each is a dict of the form
 * @param membership list of members for a resource
 * @returns An array of allowed actions for the given parameters
 */
export declare function allowedActions(rules: PolicyRule[], observers: MemberObserverList, membership: string[]): string[];
/**
 * Used to verify if an action is allowed under given policy rules for a given membership
 * @param rules array of rule objects
 * @param observers list of observers for an actor. Each is a dict of the form
 * @param membership list of members for a resource
 * @param action CRUD operation for objectapi ("read", "write", "etc.")
 * @returns `true` if an action is allowed by Policy
 */
export declare function policyAllows(rules: PolicyRule[], observers: MemberObserverList, membership: string[], action: string): boolean;
//# sourceMappingURL=security.d.ts.map